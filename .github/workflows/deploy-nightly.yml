name: Deploy Nightly

on:
  workflow_call:
    inputs:
      github-hosted-runners:
        type: boolean
        required: true
      self-hosted-runners:
        type: boolean
        required: true
      cache-seed:
        type: string
        required: true
      salt-version:
        type: string
        required: true
        description: The Salt version to set prior to building packages.

jobs:

  deploy-1:
    name: Staging Env Regular Runner
    runs-on:
      - self-hosted
      - linux
      - x86_64
    environment: staging

    steps:
      - name: Echo Environment Variables
        run: |
          echo ${{vars.TEST_VAR}}

      - name: Echo Secret 1
        run: |
          aws --region us-west-2 secretsmanager get-secret-value --secret-id /cmbu-saltstack/signing/repo-signing-keys --query SecretString --output text|jq .default_key -r

      - name: Echo Secret 2
        run: |
          aws --region us-west-2 secretsmanager get-secret-value --secret-id /cmbu-saltstack/signing/repo-signing-keys-sha256 --query SecretString --output text|jq .default_key -r

      - name: Download Source Tarball
        uses: actions/download-artifact@v3
        with:
          name: salt-${{ inputs.salt-version }}.tar.gz

      - name: Upload Tarball To Staging
        run: |
          aws s3 cp salt-${{ inputs.salt-version }}.tar.gz s3://salt-project-prod-salt-artifacts-staging

      - name: Set Exit Status
        if: always()
        run: |
          python3 -c "import os; os.makedirs('exitstatus', exist_ok=True)"
          echo "${{ job.status }}" > exitstatus/${{ github.job }}

      - name: Upload Exit Status
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: exitstatus
          path: exitstatus
          if-no-files-found: error

  deploy-2:
    name: Staging Env Locked Runner
    runs-on:
      - self-hosted
      - linux
      - artifact-staging-upload
    environment: staging

    steps:
      - name: Echo Environment Variables
        run: |
          echo ${{vars.TEST_VAR}}

      - name: Echo Secret 1
        run: |
          aws --region us-west-2 secretsmanager get-secret-value --secret-id /cmbu-saltstack/signing/repo-signing-keys --query SecretString --output text|jq .default_key -r

      - name: Echo Secret 2
        run: |
          aws --region us-west-2 secretsmanager get-secret-value --secret-id /cmbu-saltstack/signing/repo-signing-keys-sha256 --query SecretString --output text|jq .default_key -r

      - name: Download Source Tarball
        uses: actions/download-artifact@v3
        with:
          name: salt-${{ inputs.salt-version }}.tar.gz

      - name: Upload Tarball To Staging
        run: |
          aws s3 cp salt-${{ inputs.salt-version }}.tar.gz s3://salt-project-prod-salt-artifacts-staging

      - name: Set Exit Status
        if: always()
        run: |
          python3 -c "import os; os.makedirs('exitstatus', exist_ok=True)"
          echo "${{ job.status }}" > exitstatus/${{ github.job }}

      - name: Upload Exit Status
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: exitstatus
          path: exitstatus
          if-no-files-found: error

#  deploy-3:
#    name: Locked Runner No Environment
#    runs-on:
#      - self-hosted
#      - linux
#      - artifact-staging-upload
#
#    steps:
#      - name: Echo Environment Variables
#        run: |
#          echo ${{vars.TEST_VAR}}
#
#      - name: Echo Secret 1
#        run: |
#          aws --region us-west-2 secretsmanager get-secret-value --secret-id /cmbu-saltstack/signing/repo-signing-keys --query SecretString --output text|jq .default_key -r
#
#      - name: Echo Secret 2
#        run: |
#          aws --region us-west-2 secretsmanager get-secret-value --secret-id /cmbu-saltstack/signing/repo-signing-keys-sha256 --query SecretString --output text|jq .default_key -r
#
#      - name: Download Source Tarball
#        uses: actions/download-artifact@v3
#        with:
#          name: salt-${{ inputs.salt-version }}.tar.gz
#
#      - name: Upload Tarball To Staging
#        run: |
#          aws s3 cp salt-${{ inputs.salt-version }}.tar.gz s3://salt-project-prod-salt-artifacts-staging
#
#      - name: Set Exit Status
#        if: always()
#        run: |
#          python3 -c "import os; os.makedirs('exitstatus', exist_ok=True)"
#          echo "${{ job.status }}" > exitstatus/${{ github.job }}
#
#      - name: Upload Exit Status
#        if: always()
#        uses: actions/upload-artifact@v3
#        with:
#          name: exitstatus
#          path: exitstatus
#          if-no-files-found: error

#  deploy-4:
#    name: Wrong Locked Runner For Environment
#    runs-on:
#      - self-hosted
#      - linux
#      - artifact-production-upload
#    environment: staging
#
#    steps:
#      - name: Echo Environment Variables
#        run: |
#          echo ${{vars.TEST_VAR}}
#
#      - name: Echo Secret 1
#        run: |
#          aws --region us-west-2 secretsmanager get-secret-value --secret-id /cmbu-saltstack/signing/repo-signing-keys --query SecretString --output text|jq .default_key -r
#
#      - name: Echo Secret 2
#        run: |
#          aws --region us-west-2 secretsmanager get-secret-value --secret-id /cmbu-saltstack/signing/repo-signing-keys-sha256 --query SecretString --output text|jq .default_key -r
#
#      - name: Download Source Tarball
#        uses: actions/download-artifact@v3
#        with:
#          name: salt-${{ inputs.salt-version }}.tar.gz
#
#      - name: Upload Tarball To Staging
#        run: |
#          aws s3 cp salt-${{ inputs.salt-version }}.tar.gz s3://salt-project-prod-salt-artifacts-staging
#
#      - name: Set Exit Status
#        if: always()
#        run: |
#          python3 -c "import os; os.makedirs('exitstatus', exist_ok=True)"
#          echo "${{ job.status }}" > exitstatus/${{ github.job }}
#
#      - name: Upload Exit Status
#        if: always()
#        uses: actions/upload-artifact@v3
#        with:
#          name: exitstatus
#          path: exitstatus
#          if-no-files-found: error
